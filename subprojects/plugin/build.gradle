plugins {
    id 'java-gradle-plugin'
    id 'checkstyle'
    id 'jacoco'
    id 'maven-publish'
}

defaultTasks 'clean', 'build', 'install'

sourceSets {
    acceptanceTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    all {
        resolutionStrategy {
            force 'org.hamcrest:hamcrest-core:1.3'
        }
    }

    acceptanceTestImplementation.extendsFrom testImplementation
    acceptanceTestRuntime.extendsFrom testRuntime
}

dependencies {
    implementation gradleApi()
    implementation('commons-io:commons-io:2.4') {
        force = true
    }
    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'org.apache.commons:commons-collections4:4.1'
    implementation 'com.google.guava:guava-jdk5:17.0'

    testImplementation('junit:junit:4.12') {
        force = true
    }
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.4'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.4'

    compileOnly 'net.java.dev.javacc:javacc:6.1.2'
    testRuntimeOnly 'net.java.dev.javacc:javacc:6.1.2'

    acceptanceTestImplementation gradleTestKit()
    acceptanceTestImplementation('commons-io:commons-io:2.4') {
        force = true
    }
}

eclipse {
    project {
        name = 'javacc-gradle-plugin'
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'javacc-gradle-plugin', 'Implementation-Version': version
    }
}

checkstyle {
    configFile = file("${rootProject.projectDir}/config/checkstyle/checks.xml")
}

task acceptanceTest(type: Test) {
    mustRunAfter test

    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath = sourceSets.acceptanceTest.runtimeClasspath
}

check.dependsOn acceptanceTest

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier 'tests'
    from sourceSets.acceptanceTest.output
}

artifacts {
    archives sourceJar
    archives javadocJar
    archives testJar
}

gradlePlugin {
    plugins {
        javaccPlugin {
            id = 'ca.coglinc.javacc'
            implementationClass = 'ca.coglinc.gradle.plugins.javacc.JavaccPlugin'
        }
    }
}

//publishing {
//    afterEvaluate {
//        publications {
//            maven(MavenPublication) {
//                from components.java
//
////            artifact sourceJar {
////                classifier "sources"
////            }
////            artifact javadocJar {
////                classifier "javadoc"
////            }
//
//                pom.withXml {
//                    asNode().appendNode('name', project.getName())
//                    asNode().appendNode('description', 'Provides the ability to use JavaCC with Gradle. Compiles JavaCC files to Java.')
//                    asNode().appendNode('url', 'https://github.com/johnmartel/javaccPlugin')
//
//                    def license = asNode().appendNode('licenses').appendNode('license')
//                    license.appendNode('name', 'The MIT License (MIT)')
//                    license.appendNode('url', 'http://opensource.org/licenses/MIT')
//                    license.appendNode('distribution', 'repo')
//
//                    def scm = asNode().appendNode('scm')
//                    scm.appendNode('url', 'https://github.com/johnmartel/javaccPlugin')
//                    scm.appendNode('connection', 'scm:https://johnmartel@github.com/johnmartel/javaccPlugin.git')
//                    scm.appendNode('developerConnection', 'scm:git://github.com/johnmartel/javaccPlugin.git')
//
//                    def developer = asNode().appendNode('developers').appendNode('developer')
//                    developer.appendNode('id', 'jmartel')
//                    developer.appendNode('name', 'Jonathan Martel')
//                    developer.appendNode('email', 'jonathan.martel@coglinc.ca')
//                }
//            }
//        }
//    }
//}

publishing {

    repositories {
        maven {
            name = 'maven'
            url 'http://ei-nexus.agfahealthcare.com/repository/ei-releases/'
            allowInsecureProtocol = true
            credentials {
                username = System.getenv("EI_NEXUS_USER")
                password = System.getenv("EI_NEXUS_PASSWORD")
            }
        }
    }

}
